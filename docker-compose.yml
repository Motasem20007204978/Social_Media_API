version: "3"
   
services:
  database: # any name
    image: postgres:alpine
    container_name: pg_db
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - db:/data/postgresql
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - DB_NAME={DB_NAME}
      - DB_USER='{DB_USER}'
      - DB_PASSWORD={DB_PASSWORD}
    networks:
      - db

  web: # any name
    build: 
      context: backend
      dockerfile: dockerfile
    container_name: backend
    command: >
     sh -c "python manage.py makemigrations &&
            python manage.py waitfordb &&
            python manage.py migrate &&
            python manage.py runserver 0.0.0.0:5000"
    volumes:
      - ./backend:/social_media_project/ #get the real-time updates that we makes it to the project into the image
    ports:
      - "5000:5000"
    image: web:django # run the image with django tag
    env_file:
      - ./.env
    depends_on:
      - database
      - redis
    links:
      - database:db
      - redis
    networks:
      - db
      - net
      - monitoring

  redis: # Remote Dictionary Server.
    image: redis:alpine
    container_name: redis
    volumes:
      - redis:/data/redis
    ports:
      - 6379:6379
    networks:
      - net

  celery:
    container_name: celery
    image: web:django
    restart: always # restart container automatically if it is stopped manually or fails
    command: celery -A social_media_project worker -l INFO # get information in terminal
    links:
      - database
      - redis
    volumes:
      - ./backend:/social_media_project/
    depends_on:
      - database
      - redis
    env_file:
      - ./.env
    networks:
      - net
      - db 
    
  celery-beat: 
    container_name: celery_beat
    image: web:django
    restart: always
    command: celery -A social_media_project beat -l INFO
    volumes:
      - ./backend:/social_media_project/
    env_file:
      - ./.env
    depends_on:
      - celery
    links:
      - database
      - redis
    networks:
      - net
      - db 

  flower:
    image: mher/flower
    container_name: flower
    command: celery flower --persisten=True 
    # persist our data in flower so that it didnâ€™t go away on every restart of container 
    ports:
      - 5555:5555
    env_file:
      - ./.env
    depends_on:
      - celery
    links:
      - database:db
      - celery
      - celery-beat
    networks:
      - net
      - monitoring
    
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./monitor.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - flower
    networks:
      - monitoring 

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana:/data/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    networks:
      - monitoring


networks:
  db: 
  net:
  monitoring:

volumes:
  db: 
  redis:
  web:
  prometheus_data: {}
  grafana: {}